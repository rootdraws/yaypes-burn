/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ethereum-blockies-base64";
exports.ids = ["vendor-chunks/ethereum-blockies-base64"];
exports.modules = {

/***/ "(ssr)/./node_modules/ethereum-blockies-base64/dist/main.js":
/*!************************************************************!*\
  !*** ./node_modules/ethereum-blockies-base64/dist/main.js ***!
  \************************************************************/
/***/ (function(module) {

eval("(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse {}\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_563__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_563__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__nested_webpack_require_563__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__nested_webpack_require_563__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__nested_webpack_require_563__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __nested_webpack_require_563__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __nested_webpack_require_1763__) {\n\n\tconst pnglib = __nested_webpack_require_1763__(1);\n\tconst hsl2rgb = __nested_webpack_require_1763__(2);\n\n\t// The random number is a js implementation of the Xorshift PRNG\n\tconst randseed = new Array(4); // Xorshift: [x, y, z, w] 32 bit values\n\n\tfunction seedrand(seed) {\n\t  for (let i = 0; i < randseed.length; i++) {\n\t    randseed[i] = 0;\n\t  }\n\t  for (let i = 0; i < seed.length; i++) {\n\t    randseed[i % 4] = (randseed[i % 4] << 5) - randseed[i % 4] + seed.charCodeAt(i);\n\t  }\n\t}\n\n\tfunction rand() {\n\t  // based on Java's String.hashCode(), expanded to 4 32bit values\n\t  const t = randseed[0] ^ (randseed[0] << 11);\n\n\t  randseed[0] = randseed[1];\n\t  randseed[1] = randseed[2];\n\t  randseed[2] = randseed[3];\n\t  randseed[3] = randseed[3] ^ (randseed[3] >> 19) ^ t ^ (t >> 8);\n\n\t  return (randseed[3] >>> 0) / (1 << 31 >>> 0);\n\t}\n\n\tfunction createColor() {\n\t  //saturation is the whole color spectrum\n\t  const h = Math.floor(rand() * 360);\n\t  //saturation goes from 40 to 100, it avoids greyish colors\n\t  const s = rand() * 60 + 40;\n\t  //lightness can be anything from 0 to 100, but probabilities are a bell curve around 50%\n\t  const l = (rand() + rand() + rand() + rand()) * 25 ;\n\n\t  return [h / 360, s / 100, l / 100];\n\t}\n\n\tfunction createImageData(size) {\n\t  const width = size; // Only support square icons for now\n\t  const height = size;\n\n\t  const dataWidth = Math.ceil(width / 2);\n\t  const mirrorWidth = width - dataWidth;\n\n\t  const data = [];\n\t  for (let y = 0; y < height; y++) {\n\t    let row = [];\n\t    for (let x = 0; x < dataWidth; x++) {\n\t      // this makes foreground and background color to have a 43% (1/2.3) probability\n\t      // spot color has 13% chance\n\t      row[x] = Math.floor(rand() * 2.3);\n\t    }\n\t    const r = row.slice(0, mirrorWidth).reverse();\n\t    row = row.concat(r);\n\n\t    for (let i = 0; i < row.length; i++) {\n\t      data.push(row[i]);\n\t    }\n\t  }\n\n\t  return data;\n\t}\n\n\t// Modifies the passed PNG to fill in a specified rectangle\n\tfunction fillRect(png, x, y, w, h, color) {\n\t  for(let i = 0; i < w; i++) {\n\t    for (let j = 0; j < h; j++) {\n\t      png.buffer[png.index(x + i, y + j)] = color;\n\t    }\n\t  }\n\t}\n\n\tfunction buildOpts(opts) {\n\t  if (!opts.seed) {\n\t    throw new Error('No seed provided');\n\t  }\n\n\t  seedrand(opts.seed);\n\n\t  return Object.assign({\n\t    size: 8,\n\t    scale: 16,\n\t    color: createColor(),\n\t    bgcolor: createColor(),\n\t    spotcolor: createColor(),\n\t  }, opts)\n\t}\n\n\tfunction makeBlockie(address) {\n\t  const opts = buildOpts({ seed: address.toLowerCase() });\n\n\t  const imageData = createImageData(opts.size);\n\t  const width = Math.sqrt(imageData.length);\n\n\t  const p = new pnglib(opts.size * opts.scale, opts.size * opts.scale, 3);\n\t  const bgcolor = p.color(...hsl2rgb(...opts.bgcolor));\n\t  const color = p.color(...hsl2rgb(...opts.color));\n\t  const spotcolor = p.color(...hsl2rgb(...opts.spotcolor));\n\n\t  for (let i = 0; i < imageData.length; i++) {\n\t    const row = Math.floor(i / width);\n\t    const col = i % width;\n\t    // if data is 0, leave the background\n\t    if (imageData[i]) {\n\t      // if data is 2, choose spot color, if 1 choose foreground\n\t      const pngColor = imageData[i] == 1 ? color : spotcolor;\n\t      fillRect(p, col * opts.scale, row * opts.scale, opts.scale, opts.scale, pngColor);\n\t    }\n\t  }\n\t  return `data:image/png;base64,${p.getBase64()}`;\n\t}\n\n\tmodule.exports = makeBlockie;\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t/**\n\t * A handy class to calculate color values.\n\t *\n\t * @version 1.0\n\t * @author Robert Eisele <robert@xarg.org>\n\t * @copyright Copyright (c) 2010, Robert Eisele\n\t * @link http://www.xarg.org/2010/03/generate-client-side-png-files-using-javascript/\n\t * @license http://www.opensource.org/licenses/bsd-license.php BSD License\n\t *\n\t */\n\n\t// Modified by George Chan <gchan@21cn.com>\n\n\t// Further modified by Will O'B <@wbobeirne> to make it\n\t// UglifyJS and \"use strict\"; friendly\n\n\tmodule.exports = function(width,height,depth) {\n\n\n\t    // helper functions for that ctx\n\t    function write(buffer, offs) {\n\t        for (var i = 2; i < arguments.length; i++) {\n\t            for (var j = 0; j < arguments[i].length; j++) {\n\t                buffer[offs++] = arguments[i].charAt(j);\n\t            }\n\t        }\n\t    }\n\n\t    function byte2(w) {\n\t        return String.fromCharCode((w >> 8) & 255, w & 255);\n\t    }\n\n\t    function byte4(w) {\n\t        return String.fromCharCode((w >> 24) & 255, (w >> 16) & 255, (w >> 8) & 255, w & 255);\n\t    }\n\n\t    function byte2lsb(w) {\n\t        return String.fromCharCode(w & 255, (w >> 8) & 255);\n\t    }\n\n\t    this.width   = width;\n\t    this.height  = height;\n\t    this.depth   = depth;\n\n\t    // pixel data and row filter identifier size\n\t    this.pix_size = height * (width + 1);\n\n\t    // deflate header, pix_size, block headers, adler32 checksum\n\t    this.data_size = 2 + this.pix_size + 5 * Math.floor((0xfffe + this.pix_size) / 0xffff) + 4;\n\n\t    // offsets and sizes of Png chunks\n\t    this.ihdr_offs = 0; // IHDR offset and size\n\t    this.ihdr_size = 4 + 4 + 13 + 4;\n\t    this.plte_offs = this.ihdr_offs + this.ihdr_size; // PLTE offset and size\n\t    this.plte_size = 4 + 4 + 3 * depth + 4;\n\t    this.trns_offs = this.plte_offs + this.plte_size; // tRNS offset and size\n\t    this.trns_size = 4 + 4 + depth + 4;\n\t    this.idat_offs = this.trns_offs + this.trns_size; // IDAT offset and size\n\t    this.idat_size = 4 + 4 + this.data_size + 4;\n\t    this.iend_offs = this.idat_offs + this.idat_size; // IEND offset and size\n\t    this.iend_size = 4 + 4 + 4;\n\t    this.buffer_size  = this.iend_offs + this.iend_size; // total PNG size\n\n\t    this.buffer  = new Array();\n\t    this.palette = new Object();\n\t    this.pindex  = 0;\n\n\t    var _crc32 = new Array();\n\n\t    // initialize buffer with zero bytes\n\t    for (var i = 0; i < this.buffer_size; i++) {\n\t        this.buffer[i] = \"\\x00\";\n\t    }\n\n\t    // initialize non-zero elements\n\t    write(this.buffer, this.ihdr_offs, byte4(this.ihdr_size - 12), 'IHDR', byte4(width), byte4(height), \"\\x08\\x03\");\n\t    write(this.buffer, this.plte_offs, byte4(this.plte_size - 12), 'PLTE');\n\t    write(this.buffer, this.trns_offs, byte4(this.trns_size - 12), 'tRNS');\n\t    write(this.buffer, this.idat_offs, byte4(this.idat_size - 12), 'IDAT');\n\t    write(this.buffer, this.iend_offs, byte4(this.iend_size - 12), 'IEND');\n\n\t    // initialize deflate header\n\t    var header = ((8 + (7 << 4)) << 8) | (3 << 6);\n\t    header+= 31 - (header % 31);\n\n\t    write(this.buffer, this.idat_offs + 8, byte2(header));\n\n\t    // initialize deflate block headers\n\t    for (var i = 0; (i << 16) - 1 < this.pix_size; i++) {\n\t        var size, bits;\n\t        if (i + 0xffff < this.pix_size) {\n\t            size = 0xffff;\n\t            bits = \"\\x00\";\n\t        } else {\n\t            size = this.pix_size - (i << 16) - i;\n\t            bits = \"\\x01\";\n\t        }\n\t        write(this.buffer, this.idat_offs + 8 + 2 + (i << 16) + (i << 2), bits, byte2lsb(size), byte2lsb(~size));\n\t    }\n\n\t    /* Create crc32 lookup table */\n\t    for (var i = 0; i < 256; i++) {\n\t        var c = i;\n\t        for (var j = 0; j < 8; j++) {\n\t            if (c & 1) {\n\t                c = -306674912 ^ ((c >> 1) & 0x7fffffff);\n\t            } else {\n\t                c = (c >> 1) & 0x7fffffff;\n\t            }\n\t        }\n\t        _crc32[i] = c;\n\t    }\n\n\t    // compute the index into a png for a given pixel\n\t    this.index = function(x,y) {\n\t        var i = y * (this.width + 1) + x + 1;\n\t        var j = this.idat_offs + 8 + 2 + 5 * Math.floor((i / 0xffff) + 1) + i;\n\t        return j;\n\t    }\n\n\t    // convert a color and build up the palette\n\t    this.color = function(red, green, blue, alpha) {\n\n\t        alpha = alpha >= 0 ? alpha : 255;\n\t        var color = (((((alpha << 8) | red) << 8) | green) << 8) | blue;\n\n\t        if (typeof this.palette[color] == \"undefined\") {\n\t            if (this.pindex == this.depth) return \"\\x00\";\n\n\t            var ndx = this.plte_offs + 8 + 3 * this.pindex;\n\n\t            this.buffer[ndx + 0] = String.fromCharCode(red);\n\t            this.buffer[ndx + 1] = String.fromCharCode(green);\n\t            this.buffer[ndx + 2] = String.fromCharCode(blue);\n\t            this.buffer[this.trns_offs+8+this.pindex] = String.fromCharCode(alpha);\n\n\t            this.palette[color] = String.fromCharCode(this.pindex++);\n\t        }\n\t        return this.palette[color];\n\t    }\n\n\t    // output a PNG string, Base64 encoded\n\t    this.getBase64 = function() {\n\n\t        var s = this.getDump();\n\n\t        var ch = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\t        var c1, c2, c3, e1, e2, e3, e4;\n\t        var l = s.length;\n\t        var i = 0;\n\t        var r = \"\";\n\n\t        do {\n\t            c1 = s.charCodeAt(i);\n\t            e1 = c1 >> 2;\n\t            c2 = s.charCodeAt(i+1);\n\t            e2 = ((c1 & 3) << 4) | (c2 >> 4);\n\t            c3 = s.charCodeAt(i+2);\n\t            if (l < i+2) { e3 = 64; } else { e3 = ((c2 & 0xf) << 2) | (c3 >> 6); }\n\t            if (l < i+3) { e4 = 64; } else { e4 = c3 & 0x3f; }\n\t            r+= ch.charAt(e1) + ch.charAt(e2) + ch.charAt(e3) + ch.charAt(e4);\n\t        } while ((i+= 3) < l);\n\t        return r;\n\t    }\n\n\t    // output a PNG string\n\t    this.getDump = function() {\n\t        // compute adler32 of output pixels + row filter bytes\n\t        var BASE = 65521; /* largest prime smaller than 65536 */\n\t        var NMAX = 5552; /* NMAX is the largest n such that 255n(n+1)/2 + (n+1)(BASE-1) <= 2^32-1 */\n\t        var s1 = 1;\n\t        var s2 = 0;\n\t        var n = NMAX;\n\n\t        for (var y = 0; y < this.height; y++) {\n\t            for (var x = -1; x < this.width; x++) {\n\t                s1+= this.buffer[this.index(x, y)].charCodeAt(0);\n\t                s2+= s1;\n\t                if ((n-= 1) == 0) {\n\t                    s1%= BASE;\n\t                    s2%= BASE;\n\t                    n = NMAX;\n\t                }\n\t            }\n\t        }\n\t        s1%= BASE;\n\t        s2%= BASE;\n\t        write(this.buffer, this.idat_offs + this.idat_size - 8, byte4((s2 << 16) | s1));\n\n\t        // compute crc32 of the PNG chunks\n\t        function crc32(png, offs, size) {\n\t            var crc = -1;\n\t            for (var i = 4; i < size-4; i += 1) {\n\t                crc = _crc32[(crc ^ png[offs+i].charCodeAt(0)) & 0xff] ^ ((crc >> 8) & 0x00ffffff);\n\t            }\n\t            write(png, offs+size-4, byte4(crc ^ -1));\n\t        }\n\n\t        crc32(this.buffer, this.ihdr_offs, this.ihdr_size);\n\t        crc32(this.buffer, this.plte_offs, this.plte_size);\n\t        crc32(this.buffer, this.trns_offs, this.trns_size);\n\t        crc32(this.buffer, this.idat_offs, this.idat_size);\n\t        crc32(this.buffer, this.iend_offs, this.iend_size);\n\n\t        // convert PNG to string\n\t        return \"\\x89PNG\\r\\n\\x1a\\n\" + this.buffer.join('');\n\t    }\n\t};\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t// https://stackoverflow.com/questions/2353211/hsl-to-rgb-color-conversion\n\t/**\n\t * Converts an HSL color value to RGB. Conversion formula\n\t * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n\t * Assumes h, s, and l are contained in the set [0, 1] and\n\t * returns r, g, and b in the set [0, 255].\n\t *\n\t * @param   {number}  h       The hue\n\t * @param   {number}  s       The saturation\n\t * @param   {number}  l       The lightness\n\t * @return  {Array}           The RGB representation\n\t */\n\n\t function hue2rgb(p, q, t) {\n\t   if(t < 0) t += 1;\n\t   if(t > 1) t -= 1;\n\t   if(t < 1/6) return p + (q - p) * 6 * t;\n\t   if(t < 1/2) return q;\n\t   if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n\t   return p;\n\t }\n\n\tfunction hsl2rgb(h, s, l){\n\t  let r, g, b;\n\n\t  if (s == 0) {\n\t    r = g = b = l; // achromatic\n\t  } else {\n\t    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n\t    const p = 2 * l - q;\n\t    r = hue2rgb(p, q, h + 1/3);\n\t    g = hue2rgb(p, q, h);\n\t    b = hue2rgb(p, q, h - 1/3);\n\t  }\n\n\t  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255), 255];\n\t}\n\n\tmodule.exports = hsl2rgb;\n\n\n/***/ }\n/******/ ])\n});\n;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ethereum-blockies-base64/dist/main.js\n");

/***/ })

};
;